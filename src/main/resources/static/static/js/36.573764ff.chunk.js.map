{"version":3,"sources":["main/webapp/components/Laboratory/DispatchedManifest/DispatchedSamplesList.js","main/webapp/components/Typography.js","main/webapp/components/Page.js","main/webapp/actions/laboratory.js"],"names":["mapActionToProps","fetchAllLabTestOrderToday","fetchAllLabTestOrder","connect","state","patientsTestOrderList","laboratory","list","props","_useState","useState","_useState2","Object","C_Users_Dell_Desktop_13032020_Core_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","loading","setLoading","totalSampleConllected","test","maxVal","i","length","key","lab_test_order_status","push","useEffect","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_Page__WEBPACK_IMPORTED_MODULE_10__","title","material_table__WEBPACK_IMPORTED_MODULE_2___default","columns","field","type","filtering","isLoading","data","map","row","Id","patientId","name","firstName","lastName","date","dateEncounter","count","formDataObj","samplecount","actions","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","to","pathname","style","cursor","color","fontStyle","_material_ui_core_Tooltip__WEBPACK_IMPORTED_MODULE_8__","_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_9__","aria-label","_material_ui_icons_Visibility__WEBPACK_IMPORTED_MODULE_7___default","options","headerStyle","backgroundColor","margin","searchFieldStyle","width","margingLeft","exportButton","searchFieldAlignment","tagMap","h1","h2","h3","h4","h5","h6","display-1","display-2","display-3","display-4","p","lead","blockquote","Typography","_ref","TypoComp","Tag","tag","className","restProps","objectWithoutProperties","classes","classNames","defineProperty","react_default","assign","defaultProps","bem","bn","create","Page","breadcrumbs","children","b","e","components_Typography","Breadcrumb","BreadcrumbItem","_ref2","index","active","__webpack_require__","d","__webpack_exports__","fetchAllLabTestOrderOfPatient","createCollectedSample","sampleVerification","fetchFormById","fetchAllTestGroup","fetchAllTestsByTestGroup","axios__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","_api__WEBPACK_IMPORTED_MODULE_1__","_types__WEBPACK_IMPORTED_MODULE_2__","react_toastify__WEBPACK_IMPORTED_MODULE_3__","onSuccess","onError","dispatch","LABSERVICECODE","axios","get","concat","baseUrl","then","response","ACTION_TYPES","payload","console","log","catch","error","id","lab_id","put","toast"],"mappings":"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","file":"static/js/36.573764ff.chunk.js","sourcesContent":["\r\nimport React, {useEffect, useState} from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Link } from 'react-router-dom'\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllLabTestOrder } from \"./../../../actions/laboratory\";\r\nimport \"./../laboratory.css\";\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Page from './../../Page'\r\n\r\n\r\nconst PatientSearch = (props) => {\r\n    const [loading, setLoading] = useState('')\r\nuseEffect(() => {\r\n    setLoading('true');\r\n        const onSuccess = () => {\r\n            setLoading(false)\r\n        }\r\n        const onError = () => {\r\n            setLoading(false)     \r\n        }\r\n            props.fetchAllLabTestOrderToday(onSuccess, onError);\r\n}, []); //componentDidMount\r\n    \r\nfunction totalSampleConllected (test){\r\n        const  maxVal = []\r\n          for(var i=0; i<test.length; i++){\r\n              for (var key in test[i]) {\r\n                  if (test[i][key].lab_test_order_status >=1)\r\n                      maxVal.push(test[i][key])\r\n              }\r\n          }\r\n        return maxVal.length;\r\n    }\r\n \r\n    \r\n  return (\r\n    <Page title='Dispatched Samples '>\r\n      \r\n      <div>\r\n        <br/><br/>\r\n          <MaterialTable\r\n              title=\"Dispatched samples list\"\r\n              columns={[\r\n                  { title: \"Patient ID\", field: \"Id\" },\r\n                  {\r\n                    title: \"Patient Name\",\r\n                    field: \"name\",\r\n                  },\r\n                  { title: \"Date Order\", field: \"date\", type: \"date\" , filtering: false},          \r\n                  {\r\n                    title: \"Total Sample \",\r\n                    field: \"count\",\r\n                    filtering: false\r\n                  },\r\n                  {\r\n                    title: \"Sample Collected \",\r\n                    field: \"samplecount\",\r\n                    filtering: false\r\n                  },\r\n                  {\r\n                    title: \"Action\",\r\n                    field: \"actions\",\r\n                    filtering: false,\r\n                  },\r\n              ]}\r\n              isLoading={loading}\r\n              data={props.patientsTestOrderList.map((row) => ({\r\n                  Id: row.patientId,\r\n                  name: row.firstName +  ' ' + row.lastName,\r\n                  date: row.dateEncounter,\r\n                  count: row.formDataObj.length,\r\n                  samplecount: totalSampleConllected(row.formDataObj),\r\n                  actions:  <Link to ={{ \r\n                                  pathname: \"/dispatched-sample\",  \r\n                                  state: row\r\n                              }} \r\n                                  style={{ cursor: \"pointer\", color: \"blue\", fontStyle: \"bold\"}}\r\n                            >\r\n                                <Tooltip title=\"View Sample\">\r\n                                    <IconButton aria-label=\"View Sample\" >\r\n                                        <VisibilityIcon color=\"primary\"/>\r\n                                    </IconButton>\r\n                                </Tooltip>\r\n                            </Link>\r\n\r\n              }))}\r\n              options={{\r\n                  headerStyle: {\r\n                  backgroundColor: \"#9F9FA5\",\r\n                  color: \"#000\",\r\n                  margin: \"auto\"\r\n                  },\r\n                  filtering: true,\r\n                  searchFieldStyle: {\r\n                      width : '300%',\r\n                      margingLeft: '250px',\r\n                  },\r\n                  exportButton: true,\r\n                  searchFieldAlignment: 'left',          \r\n              }}\r\n\r\n          />\r\n    </div>\r\n  </Page>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        patientsTestOrderList: state.laboratory.list\r\n    };\r\n};\r\n\r\nconst mapActionToProps = {\r\n    fetchAllLabTestOrderToday: fetchAllLabTestOrder\r\n};\r\n  \r\nexport default connect(mapStateToProps, mapActionToProps)(PatientSearch);","import classNames from 'classnames';\r\nimport React from 'react';\r\nimport PropTypes from 'utils/propTypes';\r\n\r\nconst tagMap = {\r\n  h1: 'h1',\r\n  h2: 'h2',\r\n  h3: 'h3',\r\n  h4: 'h4',\r\n  h5: 'h5',\r\n  h6: 'h6',\r\n  'display-1': 'h1',\r\n  'display-2': 'h1',\r\n  'display-3': 'h1',\r\n  'display-4': 'h1',\r\n  p: 'p',\r\n  lead: 'p',\r\n  blockquote: 'blockquote',\r\n};\r\n\r\nconst types = Object.keys(tagMap);\r\n\r\nconst Typography = ({ tag: Tag, className, type, ...restProps }) => {\r\n  const classes = classNames({ [type]: !!type }, className);\r\n  let TypoComp;\r\n\r\n  if (Tag) {\r\n    TypoComp = Tag;\r\n  } else if (!Tag && tagMap[type]) {\r\n    TypoComp = tagMap[type];\r\n  } else {\r\n    TypoComp = 'p';\r\n  }\r\n\r\n  return <TypoComp {...restProps} className={classes} />;\r\n};\r\n\r\nTypography.propTypes = {\r\n  tag: PropTypes.component,\r\n  className: PropTypes.string,\r\n  type: PropTypes.oneOf(types),\r\n};\r\n\r\nTypography.defaultProps = {\r\n  type: 'p',\r\n};\r\n\r\nexport default Typography;\r\n","import React from 'react';\r\nimport PropTypes from 'utils/propTypes';\r\n\r\nimport bn from 'utils/bemnames';\r\n\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\n\r\nimport Typography from './Typography';\r\n\r\nconst bem = bn.create('page');\r\n\r\nconst Page = ({\r\n  title,\r\n  breadcrumbs,\r\n  tag: Tag,\r\n  className,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const classes = bem.b('px-5', 'p-5', className);\r\n\r\n  return (\r\n    <Tag className={classes} {...restProps}>\r\n      <div className={bem.e('header')}>\r\n        {title && typeof title === 'string' ? (\r\n          <Typography type=\"h4\" className={bem.e('title')}>\r\n            {title}\r\n          </Typography>\r\n        ) : (\r\n            title\r\n          )}\r\n        {breadcrumbs && (\r\n          <Breadcrumb className={bem.e('breadcrumb')}>\r\n            <BreadcrumbItem>Home</BreadcrumbItem>\r\n            {breadcrumbs.length &&\r\n              breadcrumbs.map(({ name, active }, index) => (\r\n                <BreadcrumbItem key={index} active={active}>\r\n                  {name}\r\n                </BreadcrumbItem>\r\n              ))}\r\n          </Breadcrumb>\r\n        )}\r\n      </div>\r\n      {children}\r\n    </Tag>\r\n  );\r\n};\r\n\r\nPage.propTypes = {\r\n  tag: PropTypes.component,\r\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\r\n  className: PropTypes.string,\r\n  children: PropTypes.node,\r\n  breadcrumbs: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      active: PropTypes.bool,\r\n    })\r\n  ),\r\n};\r\n\r\nPage.defaultProps = {\r\n  tag: 'div',\r\n  title: '',\r\n};\r\n\r\nexport default Page;\r\n","import axios from \"axios\";\r\nimport { url as baseUrl , LABSERVICECODE} from \"../api\";\r\nimport * as ACTION_TYPES from \"./types\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n/**\r\n * @Actions\r\n * CheckIn CRUD OPERATIONS\r\n * returns API response from server\r\n * =================================\r\n * fetchAll()\r\n * fetchById()\r\n * create()\r\n * update()\r\n * Delete()\r\n */\r\n\r\nexport const fetchAllLabTestOrder = (onSuccess, onError) => dispatch => {\r\n  if(LABSERVICECODE){\r\n  axios\r\n    .get(`${baseUrl}encounters/${LABSERVICECODE}/{dateStart}/{dateEnd}`)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.LABORATORY_TESTORDER,\r\n        payload: response.data\r\n      })\r\n      console.log(response)\r\n      onSuccess();\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: ACTION_TYPES.ERROR_LABORATORY_TESTORDER,\r\n        payload: 'Something went wrong, please try again'\r\n      })\r\n      onError();\r\n      console.log(error)\r\n    });\r\n}\r\n};\r\nexport const fetchAllLabTestOrderOfPatient = (id, onSuccess, onError )=> dispatch => {\r\n  //console.log(id)\r\n  if(id){\r\n  axios\r\n    .get(`${baseUrl}encounters/${id}/form-data`)\r\n    .then(response => {\r\n     \r\n      dispatch({\r\n        type: ACTION_TYPES.LABORATORY_TESTORDER_FOR_PATIENT,\r\n        payload: response.data\r\n      })\r\n      console.log(response.data)\r\n      onSuccess();\r\n      \r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: ACTION_TYPES.ERROR_LABORATORY_TESTORDER_FOR_PATIENT,\r\n        payload: error\r\n      })\r\n      onError();\r\n      console.log(error)\r\n    }\r\n    );\r\n}\r\n};\r\nexport const fetchFormDataById = (id)=> dispatch => {\r\n  if(id){\r\n  axios\r\n    .get(`${baseUrl}encounters/form-data/${id}`)\r\n    .then(response => {\r\n      // console.log(response)\r\n      dispatch({\r\n        type: ACTION_TYPES.LABORATORY_TESTORDER_FOR_LAB,\r\n        payload: response.data\r\n      })\r\n      //onSuccess();\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: ACTION_TYPES.ERROR_LABORATORY_TESTORDER_FOR_LAB,\r\n        payload: error\r\n      })\r\n   \r\n    }\r\n    );\r\n    }\r\n};\r\nexport const createCollectedSample = (data, lab_id, onSuccess, onError ) => dispatch => {\r\n\r\n  if(lab_id){\r\n    \r\n  axios\r\n    .put(`${baseUrl}form-data/${lab_id}`, data)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.CREATE_COLLECT_SAMPLE,\r\n        payload: response.data\r\n      });\r\n      onSuccess()\r\n      //toast.success(\"Sample Collection was successful\");\r\n    })\r\n    .catch(error =>{\r\n      \r\n      dispatch({\r\n        type: ACTION_TYPES.ERROR_CREATE_COLLECT_SAMPLE,\r\n        payload: error\r\n      })\r\n      onError()\r\n      //toast.error(\"Something went wrong, please try again\");\r\n      \r\n    });\r\n  }else{\r\n    toast.error(\"Something went wrong, please try again\");\r\n  }\r\n};\r\nexport const sampleVerification = (data, lab_id, onSuccess, onError ) => dispatch => {\r\n\r\n  if(lab_id){\r\n    \r\n  axios\r\n    .put(`${baseUrl}form-data/${lab_id}`, data)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.CREATE_COLLECT_SAMPLE,\r\n        payload: response.data\r\n      });\r\n      onSuccess()\r\n      //toast.success(\"Sample verified successful\");\r\n      //setInterval(window.location.reload(false), 80000);\r\n    })\r\n    .catch(error =>{\r\n      \r\n      dispatch({\r\n        type: ACTION_TYPES.ERROR_CREATE_COLLECT_SAMPLE,\r\n        payload: error\r\n      })\r\n      onError()\r\n      toast.error(\"Something went wrong, please try again\");\r\n      //setInterval(window.location.reload(false), 80000);\r\n      //window.location.reload()\r\n      \r\n    });\r\n  }else{\r\n    toast.error(\"Something went wrong, please try again\");\r\n  }\r\n};\r\n\r\nexport const transferSample = (samples, lab_id) => dispatch => {\r\n \r\n  axios\r\n    .put(`${baseUrl}form-data/`, samples)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.TRANSFER_SAMPLE,\r\n        payload: response.data\r\n      });\r\n      //toast.success(\"Sample Transfer was successful\");\r\n    })\r\n    .catch(error =>{\r\n      \r\n      dispatch({\r\n        type: ACTION_TYPES.ERROR_TRANSFER_SAMPLE,\r\n        payload: error\r\n      })\r\n      toast.error(\"Something went wrong, please try again\");\r\n\r\n    });\r\n};\r\nexport const fetchFormById = id => dispatch => {\r\n  //console.log(id)\r\n  if(id){\r\n  axios\r\n    .get(`${baseUrl}form-data/${id}`)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.FORMDATA_FETCH_BY_ID,\r\n        payload: response.data\r\n      });\r\n      //console.log(\"is getting here \") \r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: ACTION_TYPES.ERROR_FORMDATA_FETCH_BY_ID,\r\n        payload: error\r\n      })\r\n      console.log(error)\r\n    }\r\n    );\r\n  }\r\n};\r\n\r\nexport const create = data => dispatch => {\r\n  axios\r\n    .post(`${baseUrl}visits/`, data)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.CHECKIN_CREATE,\r\n        payload: response.data\r\n      });\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: ACTION_TYPES.CHECKIN_ERROR,\r\n        payload: \"Something went wrong, please try again\"\r\n      });\r\n    });\r\n};\r\n\r\nexport const update = (id, data) => dispatch => {\r\n  axios\r\n    .put(`${baseUrl}visits/${id}`, data)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.CHECKIN_UPDATE,\r\n        payload: response.data\r\n      });\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: ACTION_TYPES.CHECKIN_ERROR,\r\n        payload: \"Something went wrong, please try again\"\r\n      });\r\n    });\r\n};\r\n\r\nexport const Delete = id => dispatch => {\r\n  axios\r\n    .delete(`${baseUrl}visits/${id}`)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.CHECKIN_DELETE,\r\n        payload: response.data\r\n      });\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        types: ACTION_TYPES.CHECKIN_ERROR,\r\n        payload: \"Something went wrong, please try again\"\r\n      });\r\n    });\r\n};\r\n\r\nexport const fetchAllTestGroup = (onSuccess, onError) => dispatch => {\r\n  axios\r\n    .get(`${baseUrl}lab-test-groups/`)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.FETCH_ALL_TEST_GROUP,\r\n        payload: response.data\r\n      })\r\n      onSuccess()\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: ACTION_TYPES.LABORATORY_ERROR,\r\n        payload: 'Something went wrong, please try again'\r\n      })\r\n      onError(error.response)\r\n    })\r\n}\r\n\r\nexport const fetchAllTestsByTestGroup = (id, onSuccess, onError) => dispatch => {\r\n  axios\r\n    .get(`${baseUrl}lab-test-groups/${id}/lab-tests`)\r\n    .then(response => {\r\n      dispatch({\r\n        type: ACTION_TYPES.FETCH_ALL_TESTS_BY_TEST_GROUP,\r\n        payload: response.data\r\n      })\r\n      onSuccess()\r\n    })\r\n    .catch(error => {\r\n      dispatch({\r\n        type: ACTION_TYPES.LABORATORY_ERROR,\r\n        payload: 'Something went wrong, please try again'\r\n      })\r\n      onError(error.response)\r\n    })\r\n}\r\n\r\n"],"sourceRoot":""}